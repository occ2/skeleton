<?php
/*
 * The MIT License
 *
 * Copyright 2018 Milan Onderka <milan_onderka@occ2.cz>.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
 * THE SOFTWARE.
 */

namespace app\Base\controls\FormControl;

use app\Base\traits\TFlashMessage;
use app\Base\controls\Control\Control;
use app\Base\controls\FormControl\configurators\FormConfig;
use app\Base\controls\FormControl\builders\IFormBuilder;
use app\Base\controls\FormControl\builders\FormBuilder;
use app\Base\controls\FormControl\interfaces\IEventFactory;
use app\Base\controls\FormControl\factories\FormEventFactory;
use app\Base\controls\FormControl\interfaces\IFormFactory;
use Contributte\EventDispatcher\EventDispatcher;
use Contributte\Cache\ICacheFactory;
use Kdyby\Translation\ITranslator;
use Nette\Application\UI\ITemplate;
use Nette\Application\UI\Form as NForm;
use Nette\Application\BadRequestException;
use Nette\Application\ApplicationException;
use Nette\Utils\ArrayHash;
use Nette\Forms\Controls\BaseControl;

/**
 * parent of autogenerated Forms
 *
 * depends on
 * nette/application
 * nette/reflection
 * nette/utils
 * nette/forms
 * contribute/event-dispatcher
 *
 * @author Milan Onderka
 * @version 1.1.0
 */
abstract class FormControl extends Control
{
    use TFlashMessage;

    /**
     * @var string
     */
    public static $_iconPrefix="fas fa-";

    /**
     * @var bool
     */
    public $_simple=false;

    /**
     * @var array
     */
    public $_rendererWrappers=[
        'form' => [
            'container' => null,
        ],
        'error' => [
            'container' => 'div class="row mb-3"',
            'item' => 'div class="col-12 text-danger"',
        ],
        'group' => [
            'container' => null,
            'label' => 'p class="h3 modal-header"',
            'description' => 'p class="pl-3 lead"',
    ],
    'controls' => [
            'container' => null,
        ],

        'pair' => [
            'container' => 'div class="form-group row"',
            '.required' => null,
            '.optional' => null,
            '.odd' => null,
            '.error' => null,
        ],
        'control' => [
            'container' => 'div class="col-lg-7 col-md-9 col-sm-12"',
            '.odd' => null,
            'description' => 'small class="form-text text-muted"',
            'requiredsuffix' => null,
            'errorcontainer' => 'div class="col-12 badge badge-danger"',
            'erroritem' => null,
            '.required' => null,
            '.text' => null,
            '.password' => null,
            '.file' => null,
            '.email' => null,
            '.number' => null,
            '.submit' => null,
            '.image' => null,
            '.button' => null,
        ],

        'label' => [
            'container' => 'div class="col-lg-5 col-md-3 text-md-right col-sm-12"',
            'suffix' => null,
            'requiredsuffix' => '*',
        ],

        'hidden' => [
            'container' => null,
        ],
    ];

    /**
     * @var string
     */
    public $name;

    /**
     * @var string
     */
    public $_templatePath=__DIR__ . "/form.latte";

    /**
     * @var IFormFactory
     */
    public $_formFactory;

    /**
     * @var array
     */
    public $_loadOptionsCallback;

    /**
     * @var callable
     */
    public $_loadValuesCallback;

    /**
     * @var object
     */
    public $_values=null;

    /**
     * @var array
     */
    public $_links=[];

    /**
     * @var bool
     */
    public $_ajax=false;

    /**
     * @var bool
     */
    public $_disableBuilder=false;

    /**
     * @var IFormBuilder
     */
    public $_builder;

    /**
     * @var array
     */
    public $_override;

    /**
     * error, validate, submit, success
     * @var array
     */
    public $_symfonyEvents=[];

    /**
     * @var IEventFactory
     */
    public $_eventDataFactory;

    /**
     * @var null | array
     */
    public $onError;

    /**
     * @var null | array
     */
    public $onSubmit;

    /**
     * @var null | array
     */
    public $onSuccess;

    /**
     * @var null | array
     */
    public $onValidate;

    /**
     * @param IFormFactory $formFactory
     * @param EventDispatcher $eventDispatcher
     * @param ICacheFactory $cacheFactory
     * @param ITranslator $translator
     * @param string $formEventDataFactoryClass
     * @return void
     */
    public function __construct(IFormFactory $formFactory, EventDispatcher $eventDispatcher, ICacheFactory $cacheFactory,ITranslator $translator = null,$formEventDataFactoryClass=FormEventFactory::class)
    {
        parent::__construct($eventDispatcher, $cacheFactory, $translator);
        $this->_formFactory = $formFactory;
        $this->_configurator = new FormConfig($this);
        $this->_links = $this->_configurator->getLinks(true);
        $this->_eventDataFactory = new $formEventDataFactoryClass;
        return;
    }

    /**
     * set form without Bootstrap Card
     * @return $this
     */
    public function setSimple()
    {
        $this->_simple=true;
        return $this;
    }

    /**
     * set custom template
     * @param string $path
     * @return $this
     */
    public function setTemplate($path)
    {
        $this->_templatePath = $path;
        return $this;
    }

    /**
     * enable access to form direct thru $control->form
     * @param string $name
     * @return $this
     */
    public function &__get($name)
    {
        if ($name=="form") {
            return $this[$name];
        }
        return parent::__get($name);
    }

    /**
     * enable direct accesst to form elements
     * @param string $name
     * @return BaseControl
     */
    public function getItem($name)
    {
        $i = $this["form"][$name];
        if($i instanceof BaseControl){
            return $i;
        } else {
            throw new ApplicationException();
        }
    }

    /**
     * @return void
     */
    protected function config()
    {
        $this->_ajax = $this->_configurator->getAjax();
        if(!empty($this->_configurator->getEvents())){
            $this->_symfonyEvents = $this->_configurator->getEvents();
        }
        return;
    }

    /**
     * set form AJAX
     * @param bool $ajax
     * @return $this
     */
    public function setAjax(bool $ajax=true)
    {
        $this->_ajax = $ajax;
        return $this;
    }

    /**
     * set form to using Symfony events
     * @param array $events
     * @return $this
     */
    public function setEvents(array $events)
    {
        $this->_symfonyEvents = $events;
        return $this;
    }

    /**
     * overide form title (usable by ajax)
     * @param string $text
     * @return $this
     */
    public function setTitle(string $text)
    {
        $this->_override["title"] = $this->text($text);
        return $this;
    }

    /**
     * overide form comment (usable by ajax)
     * @param string $text
     * @return $this
     */
    public function setComment(string $text)
    {
        $this->_override["comment"] = $this->text($text);
        return $this;
    }

    /**
     * overide form footer (usable by ajax)
     * @param string $text
     * @return $this
     */
    public function setFooter(string $text)
    {
        $this->_override["footer"] = $this->text($text);
        return $this;
    }

    /**
     * get control title (if set)
     * @return string
     */
    public function getTitle()
    {
        if (isset($this->_override["title"]) && !empty($this->_override["title"])) {
            return $this->_override["title"];
        } else {
            return $this->_configurator->getTitle()==null ? null : $this->_configurator->getTitle();
        }
    }

    /**
     * get control comment (if set)
     * @return string
     */
    public function getComment()
    {
        if (isset($this->_override["comment"]) && !empty($this->_override["comment"])) {
            return $this->_override["comment"];
        } else {
            return $this->_configurator->getComment()==null ? null : $this->_configurator->getComment();
        }
    }

    /**
     * get control footer (if set)
     * @return string
     */
    public function getFooter()
    {
        if (isset($this->_override["footer"]) && !empty($this->_override["footer"])) {
            return $this->_override["footer"];
        } else {
            return $this->_configurator->getFooter()==null ? null : $this->_configurator->getFooter();
        }
    }

    /**
     * disable annotation builder
     * @return $this
     */
    public function disableBuilder()
    {
        $this->_disableBuilder = true;
        return $this;
    }

    /**
     * set load options callback
     * @param string $control
     * @param callable $callback
     */
    public function setLoadOptionsCallback(string $control, callable $callback)
    {
        $this->_loadOptionsCallback[$control] = $callback;
        return $this;
    }

    /**
     * set load values callback
     * @param callable $callback
     */
    public function setLoadValuesCallback(callable $callback)
    {
        $this->_loadValuesCallback = $callback;
        return $this;
    }

    /**
     * form factory
     * @return \Nette\Application\UI\Form
     */
    public function createComponentForm(): NForm
    {
        $this->config();
        $form = $this->_formFactory->create();
        if(isset($form->getRenderer()->wrappers)){
            $form->getRenderer()->wrappers = $this->_rendererWrappers;
        }
        
        if ($this->_ajax) {
            $form->getElementPrototype()->class('ajax');
        }
        $this->setupForm($form);
        $this->setupEvents($form);
        return $form;
    }

    /**
     * setup form events
     * @param NForm $form
     * @return void
     */
    protected function setupEvents(NForm $form)
    {
        $this->setupOnError($form);
        $this->setupOnValidate($form);
        $this->setupOnSubmit($form);
        $this->setupOnSuccess($form);
        return;
    }

    /**
     * setup form error events
     * @param NForm $form
     * @return void;
     */
    protected function setupOnError(NForm $form)
    {
        $t = $this;
        $event = $this->_configurator->onError[0];
        
        if(array_key_exists("error", $this->_symfonyEvents)){
            $form->onError[] = function (NForm $form) use ($t) {
                $data = $this->_eventDataFactory->create($form,$t,$t->_symfonyEvents["error"]);
                $t->on($t->_symfonyEvents["error"], $data);
                return;
            };
        } elseif ($event!==null) {
            $form->onError[] = function (NForm $form) use ($t,$event) {
                $data = $this->_eventDataFactory->create($form,$t,$event);
                $t->on($event, $data);
                return;
            };
        } else {
            if(!empty($this->onError)){
                $form->onError = $this->onError;
            }
        }
        return;
    }

    /**
     * setup form on validate events
     * @param NForm $form
     * @return void
     */
    protected function setupOnValidate(NForm $form)
    {
        $t = $this;
        $event = $this->_configurator->onValidate[0];
        if(array_key_exists("validate", $this->_symfonyEvents)){
            $form->onValidate[] = function (NForm $form) use ($t) {
                $data = $this->_eventDataFactory->create($form,$t,$t->_symfonyEvents["validate"]);
                return $t->on($t->_symfonyEvents["validate"], $data);
            };
        } elseif ($event!==null) {
            $form->onValidate[] = function (NForm $form) use ($t,$event) {
                $data = $this->_eventDataFactory->create($form,$t,$event);
                return $t->on($event, $data);
            };
        } else {
            if(!empty($this->onValidate)){
                $form->onValidate = $this->onValidate;
            }
        }
        return;
    }

    /**
     * setup form on submit events
     * @param NForm $form
     * @return void
     */
    protected function setupOnSubmit(NForm $form)
    {
        $t = $this;
        $event = $this->_configurator->onSubmit[0];
        if(array_key_exists("submit", $this->_symfonyEvents)){
            $form->onSubmit[] = function (NForm $form) use ($t) {
                $data = $this->_eventDataFactory->create($form,$t,$t->_symfonyEvents["submit"]);
                return $t->on($t->_symfonyEvents["submit"], $data);
            };
        } elseif ($event!==null) {
            $form->onSubmit[] = function (NForm $form) use ($t,$event) {
                $data = $this->_eventDataFactory->create($form,$t,$event);
                return $t->on($event, $data);
            };
        } else {
            if(!empty($this->onSubmit)){
                $form->onSubmit = $this->onSubmit;
            }
        }
        return;
    }

    protected function setupOnSuccess(NForm $form)
    {
        $t = $this;
        $event = $this->_configurator->onSuccess[0];
        
        if(array_key_exists("success", $this->_symfonyEvents)){
            $form->onSuccess[] = function (NForm $form) use ($t) {
                $data = $this->_eventDataFactory->create($form,$t,$t->_symfonyEvents["success"]);
                return $t->on($t->_symfonyEvents["success"], $data);
            };
        } elseif ($event!=null) {
            $form->onSuccess[] = function (NForm $form) use ($t,$event) {
                $data = $this->_eventDataFactory->create($form,$t,$event);
                return $t->on($event, $data);
            };
        } else {
            if(!empty($this->onSuccess)){
                $form->onSuccess = $this->onSuccess;
            }
        }
        return;
    }



    /**
     * overwrite by final classes
     * @param NForm $form
     * @return NForm
     */
    public function setupForm(NForm $form):NForm
    {
        if ($this->_builder instanceof IFormBuilder) {
            $form = $this->_builder
                         ->setObject($this)
                         ->setTranslator($this->_translator)
                         ->setOptionsCallbacks($this->_loadOptionsCallback)
                         ->build($form);
        } elseif ($this->_disableBuilder == false) {
            $this->_builder = new FormBuilder;
            $form = $this->_builder
                         ->setObject($this)
                         ->setTranslator($this->_translator)
                         ->setOptionsCallbacks($this->_loadOptionsCallback)
                         ->build($form);
        } else {}
        return $form;
    }

    /**
     * render control
     * @return void
     */
    public function render()
    {
        parent::render();
        $this->template->styles = $this->_configurator->getStyles();
        $this->template->title = isset($this->_override["title"]) ? $this->_override["title"] : $this->_configurator->getTitle();
        $this->template->comment = isset($this->_override["comment"]) ? $this->_override["comment"] : $this->_configurator->getComment();
        $this->template->footer = isset($this->_override["footer"]) ? $this->_override["footer"] : $this->_configurator->getFooter();
        $this->template->links = $this->_links;
        $this->template->name = $this->name;
        $this->template->simple = $this->_simple;
        if($this->template instanceof ITemplate){
            $this->template->setFile($this->_templatePath);
            $this->template->render();
        }
        return;
    }

    /**
     * load values into form
     * @param mixed $id
     * @throws \BadFunctionCallException
     * @throws \Nette\Application\BadRequestException
     */
    public function loadValues($id)
    {
        if (!is_callable($this->_loadValuesCallback)) {
            throw new \BadFunctionCallException;
        }
        try {
            $this->_values = call_user_func_array($this->_loadValuesCallback, [$id]);
            if (!$this->_values) {
                throw new BadRequestException;
            }
            $this['form']->setDefaults($this->_values);
        } catch (\Exception $exc) {
            throw new BadRequestException;
        }
        return $this;
    }

    /**
     * set default values
     * @param ArrayHash | array $values
     * @return $this
     */
    public function setDefaults($values)
    {
        $this['form']->setDefaults($values);
        return $this;
    }

    /**
     * clear values
     * @return $this
     */
    public function clearValues()
    {
        $this['form']->reset();
        return $this;
    }

    /**
     * load option
     * @param string $option
     * @return array
     */
    protected function loadOptions(string $option):array
    {
        return (array) call_user_func($this->_loadOptionsCallback[$option]);
    }

    /**
     * set form builder
     * @param IFormBuilder $builder
     * @return $this
     */
    public function setBuilder(IFormBuilder $builder)
    {
        $this->_builder = $builder;
        return $this;
    }

    /**
     * get form builder
     * @return IFormBuilder
     */
    public function getBuilder():IFormBuilder
    {
        return $this->_builder;
    }

    /**
     * fire error to element
     * @param string $element
     * @param string $message
     * @return void
     */
    public function throwError(string $element, string $message)
    {
        if($this["form"][$element] instanceof BaseControl){
            $this["form"][$element]->addError($message);
            $this->reload();
        }

        return;
    }

    /**
     * reload form
     * @return void
     */
    public function reload()
    {
        $this->redrawControl("form");
        return;
    }
}
