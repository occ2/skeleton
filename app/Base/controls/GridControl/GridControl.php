<?php
namespace app\Base\controls\GridControl;

use app\Base\traits\TFlashMessage;
use app\Base\controls\Control\Control;
use app\Base\controls\GridControl\builders\IGridBuilder;
use app\Base\controls\GridControl\configurators\GridConfig;
use app\Base\controls\GridControl\DataGrid;
use app\Base\controls\GridControl\exceptions\GridCallbackException;
use app\Base\controls\GridControl\exceptions\GridBuilderException;
use app\Base\controls\GridControl\builders\GridBuilder;
use app\Base\controls\GridControl\interfaces\IGridFactory;
use app\Base\controls\GridControl\interfaces\IGridEventFactory;
use app\Base\controls\GridControl\factories\GridEventFactory;
use app\Base\controls\GridControl\interfaces\IGridRowEventFactory;
use app\Base\controls\GridControl\factories\GridRowEventFactory;
use Ublaboo\DataGrid\Column\Column;
use Ublaboo\DataGrid\Column\Action;
use Ublaboo\DataGrid\Filter\Filter;
use Contributte\EventDispatcher\EventDispatcher;
use Contributte\Cache\ICacheFactory;
use Nette\Localization\ITranslator;
use Nette\Utils\Strings;
use Nette\Utils\ArrayHash;
use Nette\Utils\Callback;

/**
 * GridControl parent of autogenerated datagrids
 *
 * depends on
 * ublaboo/datagrid
 * nette/reflection
 * contribute/event-dispatcher
 * contribute/utils
 * contributte/cache
 *
 * @author Milan Onderka <milan_onderka@occ2.cz>
 * @version 1.1.0
 * @TODO add symfony event annotations
 */
abstract class GridControl extends Control
{
    use TFlashMessage;
    
    const CALLBACK_CATALOG=[
        "loadOptions",
        "action",
        "itemDetail",
        "itemDetailCondition",
        "toolbarButton",
        "columnRenderer",
        "columnConfition",
        "sortColumn",
        "statusChange",
        "summary",
        "summaryRenderer",
        "column",
        "filterCondition",
        "actionIcon",
        "actionClass",
        "actionTitle",
        "actionConfirm",
        "sorting",
        "groupActionOptions",
        "groupAction",
        "allowRowsGroupAction",
        "allowRowsInlineEdit",
        "allowRowsAction",
        "allowRowsMultiAction",
        "row",
        "export",
        "editable",
        "editableValue",
        "inlineForm",
        "inlineLoadOptions",
        "inlineFormFill",
        "inlineAddSubmit",
        "inlineEditSubmit",
        "inlineCustomRedraw",
        "allowToolbarButton"
    ];
    
    const GRID_CONTROL="grid";
    
    /**
     * @var string
     */
    public $_iconPrefix="fas fa-";

    /**
     * @var string
     */
    public $_toolbarHandler="toolbar!";
    
    /**
     * @var string
     */
    public $name;
    
    /**
     * @var array
     */
    public $_links=[];

    /**
     * @var string
     */
    public $_templatePath=__DIR__ . "/templates/gridControl.latte";
    
    /**
     * @var string
     */
    public $_gridTemplatePath=__DIR__ . "/templates/datagrid.latte";

    /**
     * @var string
     */
    public $_gridPaginatorTemplatePath = __DIR__ . "/templates/data_grid_paginator.latte";

    /**
     * @var string
     */
    public $_gridStatusTemplatePath=__DIR__ . "/templates/column_status.latte";

    /**
     * @var string
     */
    public $_gridDetailTemplatePath=__DIR__ . "/templates/detail.latte";

    /**
     * @var array
     */
    public $_gridFilterTemplatesPath = [
        "text"=>__DIR__ . "/templates/datagrid_filter_text.latte",
        "select"=>__DIR__ . "/templates/datagrid_filter_select.latte",
        "multiselect"=>__DIR__ . "/templates/column_status.latte",
        "date"=>__DIR__ . "/templates/datagrid_filter_date.latte",
        "range"=>__DIR__ . "/templates/datagrid_filter_range.latte",
        "daterange"=>__DIR__ . "/templates/datagrid_filter_daterange.latte"
    ];

    /**
     * @var array
     */
    public $_defaultGridStatusSettings=[
        "class"=>"btn-info",
        "classSecondary"=>"btn-sm",
        "classInDropdown"=>"dropdown-item",
    ];

    /**
     * @var array
     */
    public $_defaultNumberFormat=[
        "decimals"=>0,
        "decPoint"=>".",
        "thousandsSeparator"=>" "
    ];

    /**
     * @var array
     */
    public $_defaultDatetimeFormat=[
      "php"=>'j.n.Y H:i:s',
      "js"=>'d. m. yyyy'
    ];

    /**
     * @var string
     */
    public $_defaultSortableHandler="sort!";
    
    /**
     * @var mixed
     */
    public $_datasource=null;
    
    /**
     * @var IGridBuilder
     */
    public $_builder;
    
    /**
     * @var array
     */
    public $_override;

    /**
     * @var bool
     */
    public $_disableBuilder=false;

    /**
     * action*, export*, groupAction*, toolbarButton* inlineAddSubmit, inlineEditSubmit
     * @var array
     */
    public $_symfonyEvents;
    
    /**
     * @var bool
     */
    public $_simpleGrid=false;

    /**
     * @var array
     */
    public $_callbacks;

    /**
     * @var IGridFactory
     */
    public $_gridFactory;

    /**
     * @var string
     */
    public $_gridClass;

    /**
     * @var IGridEventFactory
     */
    public $_gridEventFactory;

    /**
     * @var IGridRowEventFactory
     */
    public $_gridRowEventFactory;

    /**
     * @param IGridFactory $gridFactory
     * @param EventDispatcher $eventDispatcher
     * @param ITranslator $translator
     * @param IStorage $cachingStorage
     * @param string $gridEventFactoryClass
     * @param string $gridRowEventFactoryClass
     * @return void
     */
    public function __construct(
        IGridFactory $gridFactory,
        EventDispatcher $eventDispatcher,
        ICacheFactory $cacheFactory,
        ITranslator $translator = null,
        string $gridEventFactoryClass=GridEventFactory::class,
        string $gridRowEventFactoryClass=GridRowEventFactory::class
    )
    {
        $this->_configurator = new GridConfig($this);
        $this->_links = $this->_configurator->getLinks(true);
        $this->_symfonyEvents = $this->_configurator->getEvents();
        $this->_callbacks = new ArrayHash;
        $this->_gridFactory = $gridFactory;
        $this->_gridClass = $gridFactory->getClass();
        $this->_gridEventFactory = new $gridEventFactoryClass;
        $this->_gridRowEventFactory = new $gridRowEventFactoryClass;
        return parent::__construct($eventDispatcher, $cacheFactory, $translator);
    }

    /**
     * before render - to override
     * @param DataGrid $grid
     */
    public function beforeRender(DataGrid $grid)
    {
    }

    /**
     * after render to override
     * @param DataGrid $grid
     */
    public function afterRender(DataGrid $grid)
    {
    }

    /**
     * before build to override
     * @param DataGrid $grid
     */
    public function beforeBuild(DataGrid $grid)
    {
    }

    /**
     * after build to override
     * @param DataGrid $grid
     */
    public function afterBuild(DataGrid $grid)
    {
    }

    /**
     * sort handler to override
     * @param DataGrid $grid
     * @param mixed $itemId
     * @param mixed $prevId
     * @param mixed $nextId
     * @param mixed $parentId
     */
    public function sort(DataGrid $grid, $itemId, $prevId, $nextId, $parentId)
    {
    }
    
    /**
     * universal callback setter
     * @param string $name
     * @param array $args
     * @return void
     */
    public function __call($name, $args)
    {
        if (Strings::startsWith($name, "set")) {
            if (Strings::endsWith($name, "Callback")) {
                $anchor = Strings::firstLower(str_replace("Callback", "", str_replace("set", "", $name)));
                if (!in_array($anchor, static::CALLBACK_CATALOG)) {
                    throw new GridCallbackException("ERROR: Unknown Callback.", GridCallbackException::UNKNOWN_CALLBACK);
                }
                if (count($args)==1) {
                    $this->_callbacks->$anchor = $args[0];
                } else {
                    $this->_callbacks->$anchor[$args[0]] = $args[1];
                }
                return;
            }
        }
        return parent::__call($name, $args);
    }
    
    /**
     * enable access to grid direct thu $control->grid
     * @param string $name
     * @return $this
     */
    public function &__get($name)
    {
        if ($name==self::GRID_CONTROL) {
            return $this[$name];
        }
        return parent::__get($name);
    }

    /**
     * enable direct access to grid columns
     * @param string $name
     * @return Column
     */
    public function getColumn($name)
    {
        return $this[self::GRID_CONTROL]->getColumn($name);
    }

    /**
     * enable direct access to grid actions
     * @param string $name
     * @return Action
     */
    public function getAction($name)
    {
        return $this[self::GRID_CONTROL]->getAction($name);
    }
    
    /**
     * enable direct access to grid filters
     * @param string $name
     * @return Filter
     */
    public function getFilter($name)
    {
        return $this[self::GRID_CONTROL]->getFilter($name);
    }
    
    /**
     * datasource setter
     * @param mixed $datasource
     * @return $this
     */
    public function setDatasource($datasource)
    {
        $this->_datasource = $datasource;
        return $this;
    }
    
    /**
     * custom template setter
     * @param string $template
     * @return $this
     */
    public function setTemplate(string $template)
    {
        $this->_templatePath = $template;
        return $this;
    }
    
    /**
     * setup grid to using Symfony events
     * @param array $events
     * @return $this
     */
    public function setEvents(array $events)
    {
        $this->_symfonyEvents = $events;
        return $this;
    }

    /**
     * overide form title (usable by ajax)
     * @param string $text
     * @return $this
     */
    public function setTitle(string $text)
    {
        $this->_override["title"] = $this->text($text);
        return $this;
    }

    /**
     * overide form comment (usable by ajax)
     * @param string $text
     * @return $this
     */
    public function setComment(string $text)
    {
        $this->_override["comment"] = $this->text($text);
        return $this;
    }

    /**
     * overide form footer (usable by ajax)
     * @param string $text
     * @return $this
     */
    public function setFooter(string $text)
    {
        $this->_override["footer"] = $this->text($text);
        return $this;
    }

    /**
     * get control title (if set)
     * @return string
     */
    public function getTitle()
    {
        if (isset($this->_override["title"]) && !empty($this->_override["title"])) {
            return $this->_override["title"];
        } else {
            return $this->_configurator->getTitle()==null ? null : $this->_configurator->getTitle();
        }
    }

    /**
     * get control comment (if set)
     * @return string
     */
    public function getComment()
    {
        if (isset($this->_override["comment"]) && !empty($this->_override["comment"])) {
            return $this->_override["comment"];
        } else {
            return $this->_configurator->getComment()==null ? null : $this->_configurator->getComment();
        }
    }

    /**
     * get control footer (if set)
     * @return string
     */
    public function getFooter()
    {
        if (isset($this->_override["footer"]) && !empty($this->_override["footer"])) {
            return $this->_override["footer"];
        } else {
            return $this->_configurator->getFooter()==null ? null : $this->_configurator->getFooter();
        }
    }

    /**
     * set grid without Bootstrap Card encapsulation
     * @param bool $simple
     * @return $this
     */
    public function setSimple(bool $simple=true)
    {
        $this->_simpleGrid = $simple;
        return $this;
    }
    
    /**
     * disable annotation builder
     * @return $this
     */
    public function disableBuilder()
    {
        $this->_disableBuilder = true;
        return $this;
    }
    
    /**
     * set grid builder
     * @param IGridBuilder $builder
     * @return $this
     */
    public function setBuilder(IGridBuilder $builder)
    {
        $this->_builder = $builder;
        return $this;
    }

    /**
     * get grid builder
     * @return IGridBuilder
     */
    public function getBuilder(): IGridBuilder
    {
        return $this->_builder;
    }
    
    /**
     * reload grid
     * @return void
     */
    public function reload()
    {
        $this->redrawControl(self::GRID_CONTROL);
        return;
    }

    /**
     * redraw one row
     * @param mixed $id
     * @return void
     */
    public function redrawItem($id)
    {
        $this[self::GRID_CONTROL]->redrawItem($id);
        return;
    }
    
    /**
     * render control
     * @return void
     */
    public function render()
    {
        $this->beforeRender($this[self::GRID_CONTROL]);
        parent::render();
        $this[self::GRID_CONTROL]->setDataSource($this->_datasource);
        $this->template->styles = $this->_configurator->getStyles();
        $this->template->title = isset($this->_override["title"]) ? $this->_override["title"] : $this->_configurator->getTitle();
        $this->template->comment = isset($this->_override["comment"]) ? $this->_override["comment"] : $this->_configurator->getComment();
        $this->template->footer = isset($this->_override["footer"]) ? $this->_override["footer"] : $this->_configurator->getFooter();
        $this->template->links = $this->_links;
        $this->template->simple = $this->_simpleGrid;
        $this->template->name = $this->name;
        $this->template->setFile($this->_templatePath);
        $this->template->render();
        $this->afterRender($this[self::GRID_CONTROL]);
        return;
    }
    
    /**
     * datagrid factory
     * @param string $name
     * @return DataGrid
     */
    public function createComponentGrid(string $name): DataGrid
    {
        if ($this->_datasource==null) {
            throw new GridBuilderException("ERROR: Dataset is null !!", GridBuilderException::INVALID_DATASET);
        }
        $grid = $this->_gridFactory->create();
        $class = $this->_gridFactory->getClass();
        $grid->setDataSource($this->_datasource);
        $this->_gridClass::$icon_prefix =  $this->_iconPrefix;
        $this->addComponent($grid, $name);
        $this->beforeBuild($grid);
        $this->configGrid($grid);
        $this->buildGrid($grid);
        $this->afterBuild($grid);
        $grid->getPaginator()==null ?: $grid->getPaginator()->setTemplateFile($this->_gridPaginatorTemplatePath);
        return $grid;
    }

    /**
     * config grid
     * @param DataGrid $grid
     * @return DataGrid
     */
    protected function configGrid(DataGrid $grid): DataGrid
    {
        if ($this->_translator instanceof ITranslator) {
            $grid->setTranslator($this->_translator);
        }
        return $grid;
    }

    /**
     * build datagrid
     * @param DataGrid $grid
     * @return DataGrid
     */
    protected function buildGrid(DataGrid $grid):DataGrid
    {
        if ($this->_builder instanceof IGridBuilder) {
            $grid = $this->_builder
                         ->setObject($this)
                         ->build($grid);
        } elseif ($this->_disableBuilder == false) {
            $this->_builder = new GridBuilder();
            $grid = $this->_builder
                         ->setObject($this)
                         ->build($grid);
        } else {
        }
        return $grid;
    }
    
    /**
     * check if callback is valid
     * @param string $callback
     * @param string $column
     * @return boolean
     */
    protected function checkCallback(string $callback, string $column=null)
    {
        if ($column==null) {
            if (isset($this->_callbacks->{$callback})) {
                return Callback::check($this->_callbacks->{$callback});
            } else {
                return false;
            }
        } else {
            if (isset($this->_callbacks->{$callback}[$column])) {
                return Callback::check($this->_callbacks->{$callback}[$column]);
            } else {
                return false;
            }
        }
    }
    
    /**
     * invoke callback
     * @param callable $callback
     * @param mixed $params
     * @return mixed
     * @throws GridCallbackException
     */
    protected function invokeCallback(string $callback, $column=null, $param1=null, $param2=null, $param3=null, $param4=null, $param5=null)
    {
        if (!$this->checkCallback($callback, $column)) {
            throw new GridCallbackException("ERROR: Invalid callback", GridCallbackException::INVALID_CALLBACK);
        }
        if ($column==null) {
            $method = $this->_callbacks->$callback;
            return $method($param1, $param2, $param3, $param4, $param5);
        } else {
            $method = $this->_callbacks->$callback[$column];
            return $method($param1, $param2, $param3, $param4, $param5);
        }
    }
    
    /**
     * get all grid callbacks
     * @return array
     */
    public function getCallbacks()
    {
        return $this->_callbacks;
    }

    /**
     * get configurator
     * @return GridConfig
     */
    public function getConfigurator(): GridConfig
    {
        return $this->_configurator;
    }

    /**
     * handle toolbar btn callback
     * @param string $name
     * @param mixed $params
     * @return mixed
     */
    public function handleToolbar(string $name, $event,$params)
    {
        if($event==false){
            return $this->invokeCallback(GridBuilder::TOOLBAR_BUTTON_CALLBACK, $name, $this, unserialize($params));
        } else {
            $data = $this->_gridEventFactory->create($this[self::GRID_CONTROL],$this,null,$params,$event);
            $this->on($this->_symfonyEvents[$event], $data);
        }
    }

    /**
     * handle sort 
     * @param mixed $item_id
     * @param mixed $prev_id
     * @param mixed $next_id
     * @param mixed $parent_id
     * @return mixed
     */
    public function handleSort($item_id, $prev_id, $next_id, $parent_id=null)
    {
        if ($this->checkCallback(GridBuilder::SORTING_CALLBACK)) {
            return $this->invokeCallback(GridBuilder::SORTING_CALLBACK, null, $itemId, $prevId, $nextId, $parent_id, $this);
        } else {
            $this->sort($this[self::GRID_CONTROL], $item_id, $prev_id, $next_id, $parent_id);
        }
    }
}
